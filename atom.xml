<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stay foolish, stay hungry.]]></title>
  <link href="http://jeffreylyg.github.io/atom.xml" rel="self"/>
  <link href="http://jeffreylyg.github.io/"/>
  <updated>2014-12-23T01:15:08+08:00</updated>
  <id>http://jeffreylyg.github.io/</id>
  <author>
    <name><![CDATA[Jeffrey Lee]]></name>
    <email><![CDATA[jeffreylyg@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[onInterceptTouchEvent和onTouchEvent的调用时序]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/11/10/onintercepttoucheventhe-ontoucheventde-diao-yong-shi-xu/"/>
    <updated>2014-11-10T23:40:42+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/11/10/onintercepttoucheventhe-ontoucheventde-diao-yong-shi-xu</id>
    <content type="html"><![CDATA[<p>大多数刚接触Android开发的同学可能会对<code>onInterceptTouchEvent</code>和<code>onTouchEvent</code>这两个方法的调用时序搞不明白，我刚开始也是，只是知其然，但不知其所以然。其实很多事情最重要的是亲手去做，一旦自己亲手去做了，很多事情就会豁然开朗。下面我们通过代码和Log将这两个方法的调用时序给大家展示明白。</p>

<p><code>onInterceptTouchEvent</code>是ViewGroup中的方法，从字面上理解很简单，就是拦截Touch事件，返回<strong>true</strong>表示拦截，返回<strong>false</strong>表示不拦截。</p>

<p><code>onTouchEvent</code>是View中的方法，它也返回一个布尔值，<strong>true</strong>表示对这个Touch事件进行处理，消耗（consume）了这个事件，<strong>false</strong>表示对这个Touch事件不进行处理，没有消耗这个事件，然后将这个事件返回给它的父亲处理。</p>

<p>首先，我们一定要对Android的触控系统（Touch System）充分理解，当我们手指按在手机屏幕上的时候，首先是当前的Activity接收到这个事件，然后通过<code>dispatchTouchEvent</code>方法将事件分发给当前的布局（layout），最先接收到事件的是布局最外层的ViewGroup，也就是身为父亲的ViewGroup，然后它再通过自己的<code>dispatchTouchEvent</code>方法将这个事件传递给它的孩子（View或ViewGroup），如果此时这个父亲在它的<code>onInterceptTouchEvent</code>方法中返回<strong>true</strong>表示它将这个事件拦截了，以后的所有事件都不传递给自己的孩子了，在自己的<code>onTouchEvent</code>中返回<strong>true</strong>来处理这个事件，返回<strong>false</strong>交给它的父亲来处理这个事件。反之，以后的事件它都传递给自己的孩子，让自己的孩子来处理这个事件,同时它也监听着。一旦拦截了就将以后所有的事件都不会传递给自己的孩子了，这个过程是不可逆的，直到下一个周期到来（接收到下一个<strong>Down</strong>事件）。Android的触控系统是以接收到一个<strong>Down</strong>事件到接收到一个<strong>Up</strong>或<strong>Cancel</strong>事件为一个周期的。Android的触控系统就是这样将事件层层传递和层层返回的。</p>

<!--more-->


<p>好了，下面我们来看具体的例子，Demo的布局很简单，就是一个自定义的LinearLayout嵌套了一个自定义的View，对应的XML代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;com.jeffreylee.androidtest.CustomLinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.jeffreylee.androidtest.CustomView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/child&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;300dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;300dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/holo_red_dark&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/com.jeffreylee.androidtest.CustomLinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>父亲CustomLinearLayout<code>onInterceptTouchEvent</code>中返回<strong>true</strong>拦截事件</h3>

<p>CustomLinearLayout.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CustomView.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Log如下：</p>

<blockquote><p>I/AndroidTouchSystem(24162): ParentView has received ACTION_DOWN in onInterceptTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_DOWN in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(24162): ParentView has received ACTION_UP in onTouchEvent</p></blockquote>

<h3>父亲CustomLinearLayout<code>onInterceptTouchEvent</code>中返回<strong>false</strong>不拦截事件，孩子CustomView<code>onTouchEvent</code>中返回false不处理事件</h3>

<p>CustomLinearLayout.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CustomView.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Log如下：</p>

<blockquote><p>I/AndroidTouchSystem(25705): ParentView has received ACTION_DOWN in onInterceptTouchEvent
I/AndroidTouchSystem(25705): ChildView has received ACTION_DOWN in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_DOWN in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(25705): ParentView has received ACTION_UP in onTouchEvent</p></blockquote>

<h3>父亲CustomLinearLayout<code>onInterceptTouchEvent</code>中返回<strong>false</strong>不拦截事件，孩子CustomView<code>onTouchEvent</code>中返回true消耗事件</h3>

<p>CustomLinearLayout.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onInterceptTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ParentView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CustomView.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_DOWN in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_MOVE in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ChildView has received ACTION_UP in onTouchEvent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Log如下：</p>

<blockquote><p>I/AndroidTouchSystem(26236): ParentView has received ACTION_DOWN in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_DOWN in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_MOVE in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_MOVE in onTouchEvent
I/AndroidTouchSystem(26236): ParentView has received ACTION_UP in onInterceptTouchEvent
I/AndroidTouchSystem(26236): ChildView has received ACTION_UP in onTouchEvent</p></blockquote>

<p>同学们看完代码和Log后对<code>onInterceptTouchEvent</code>和<code>onTouchEvent</code>的调用时序应该就会很明白了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processes and Threads]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/05/22/processes-and-threads/"/>
    <updated>2014-05-22T14:18:44+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/05/22/processes-and-threads</id>
    <content type="html"><![CDATA[<blockquote><p>注：此为毕业设计中学院要求的翻译与自己所做毕设相关且不少于2万字符英文原始资料的任务，由于自己毕设做的是Android方面的开发，所以决定翻译一下Android官方文档中Training和API Guides中的部分内容。由于水平有限，如有错误，望理解。</p></blockquote>

<h2><a href="http://developer.android.com/guide/components/processes-and-threads.html">原文链接</a></h2>

<br/>


<p>当一个应用程序组件启动并且这个应用程序没有任何其它组件运行时，Android系统会为这个应用程序启动一个新的执行单线程的Linux进程。默认情况下，同一个应用程序的所有组件在同一个进程和线程（称为“主”线程）中运行。如果一个应用程序组件启动并且已经为那个应用程序存在一个进程（因为那个应用程序的另一个组件存在），则这个组件在那个进程内启动并且使用同一个执行线程。然而，你可以将应用程序的不同组件安排运行在不同的进程里，并且你可以为任何进程创建额外的线程。</p>

<p>这份文档讨论了进程和线程在一个Android应用程序里是如何工作的。</p>

<!--more-->


<h2>进程</h2>

<p>默认情况下，同一个应用程序的所有组件运行在同一个进程上并且大多数应用程序不应该改变这一点。然而，如果你发现你需要控制某个组件属于哪个进程，你可以在manifest文件里这样做。</p>

<p>组件元素每种类型的清单项——<a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a>,<a href="http://developer.android.com/guide/topics/manifest/service-element.html">&lt;service></a>,<a href="http://developer.android.com/guide/topics/manifest/receiver-element.html">&lt;receiver></a>和<a href="http://developer.android.com/guide/topics/manifest/provider-element.html">&lt;provider></a>——支持一个 android:process 属性可以指定一个那个组件运行的进程。你可以设置这个属性以便每个组件运行在它自己的进程上或者一些组件共享一个进程而其它的组件没有。你还可以设置 android:process 以便不同应用程序的组件运行在同一个进程里——只要这些应用程序共享相同的Linux用户ID和相同的证书签名。</p>

<p><a href="http://developer.android.com/guide/topics/manifest/application-element.html">&lt;application></a>元素也支持 android:process 属性，设置一个默认值应用于所有的组件。</p>

<p>当内存不足和被其它进程要求更直接服务用户时，Android也许在某些时候决定关闭进程。在被杀进程中运行的应用程序组件因此被破坏。一个进程再次启动这些组件当再次有工作给它们做时。</p>

<p>当决定杀死哪些进程时，Android系统衡量它们对用户的相对重要性。例如，更容易关闭一个持有在屏幕上看不见的活动的进程，相对于持有可见活动的进程来说。因此，决定是否要终止一个进程，取决于在那个进程里运行的组件的状态。用于决定哪些进程终止的规则将在下面讨论。</p>

<h3>进程生命周期</h3>

<p>Android系统试图尽可能地保持一个应用程序的进程，但是最终为了新的或更重要的进程还是需要移除旧的进程来回收内存。要决定保持哪些进程和杀死哪些进程，系统基于运行在进程里的组件和这些组件的状态将每个进程放进了“重要性层级”。最低重要性的进程最先被消除，然后是这些次重要性的进程，然后依次类推，如果有必要回收系统资源。</p>

<p>有五个级别的重要性层级。下面的列表按重要性的顺序展示了不同类型的进程（第一个进程是最重要的且最后一个被杀死的）。</p>

<p>1.前台进程</p>

<p>一个用户当前正在做什么需要的进程。一个进程被认为是在前台如果下列任何情况为真：</p>

<ul>
<li><p>它持有一个用户正在进行交互的<a href="http://developer.android.com/reference/android/app/Activity.html">Activity</a>（<a href="http://developer.android.com/reference/android/app/Activity.html">Activity</a>的<a href="http://developer.android.com/reference/android/app/Activity.html#onResume()">onResume()</a>方法被调用）。</p></li>
<li><p>它持有一个绑定到用户正在进行交互的活动的<a href="http://developer.android.com/reference/android/app/Service.html">Service</a>。</p></li>
<li><p>它持有一个正在运行在前台的<a href="http://developer.android.com/reference/android/app/Service.html">Service</a>——这个服务调用了<a href="http://developer.android.com/reference/android/app/Service.html#startForeground(int,%20android.app.Notification)">startForeground()</a>方法。</p></li>
<li><p>它持有一个正在执行Service生命周期中的一个回调函数的<a href="http://developer.android.com/reference/android/app/Service.html">Service</a>（<a href="http://developer.android.com/reference/android/app/Service.html#onCreate()">onCreate()</a>，<a href="http://developer.android.com/reference/android/app/Service.html#onStart(android.content.Intent,%20int)">onStart()</a>，或者<a href="http://developer.android.com/reference/android/app/Service.html#onDestroy()">onDestroy()</a>）。</p></li>
<li><p>它持有一个正在执行<a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#onReceive(android.content.Context,%20android.content.Intent)">onReceive()</a>方法的<a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html">BroadcastReceiver</a>。</p></li>
</ul>


<p>通常，只有少数前台进程在任何给定的时间存在。它们被杀死仅仅是作为最后的手段——如果内存是如此之低以至于它们都不能继续运行。一般来说，在这一点上，该设备已经达到了内存分页状态，所以需要杀死某些前台进程来保持用户界面能够响应。</p>

<p>2.可见进程</p>

<p>一个没有任何前台组件，但是仍然能够影响用户在屏幕上看到什么的进程。一个进程被认为是可见的如果下列任何一个情况为真：</p>

<ul>
<li><p>它持有一个不在前台的<a href="http://developer.android.com/reference/android/app/Activity.html">Activity</a>，但是仍然对用户是可见的（它的<a href="http://developer.android.com/reference/android/app/Activity.html#onPause()">onPause()</a>方法被调用）。这可能会发生，例如，如果前台活动启动一个对话框，它允许前一个活动在它后面能看到。</p></li>
<li><p>它持有一个绑定到可见的（或前台的）活动的<a href="http://developer.android.com/reference/android/app/Service.html">Service</a>。</p></li>
</ul>


<p>一个可见进程被认为是及其重要的并且不会被杀死除非这样做是需要保持所有前台进程的运行。</p>

<p>3.Service 进程</p>

<p>一个正在运行着被<a href="http://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)">startService()</a>方法启动的服务的进程并且不属于任何上两个更高的类别中的一个。尽管服务进程不会直接连接到用户看到的任何东西，它们一般都做用户关心的事情（例如在后台播放音乐或者在网络上下载数据），因此系统保持它们运行除非没有足够的内存保留它们和前台进程以及可见进程一起运行。</p>

<p>4.后台进程</p>

<p>一个持有对用户当前不可见活动的进程（活动的<a href="http://developer.android.com/reference/android/app/Activity.html#onStop()">onStop()</a>方法被调用）。这些进程对用户体验没有直接影响，并且系统可以在任何时候杀死它们来为前台、可见或是服务进程回收内存。通常情况下有很多正在运行的后台进程，因此它们保持着一个LRU（最近最少使用）清单来确保最经常被用户看见的活动的进程最后一个被杀死。如果活动正确地实现了它的生命周期方法，并且保存其当前状态，杀死它的进程不会对用户体验有明显的效果，因为当用户导航返回这个活动时，活动恢复了其所有的可见状态。请参阅有关保存和恢复状态信息的<a href="http://developer.android.com/guide/components/activities.html#SavingActivityState">Activities</a>文档。</p>

<p>5.空进程</p>

<p>一个不再持有任何活动的应用程序组件的进程。保持这种进程活着的唯一原因是高速缓存的目的，以提高一个需要运行在它里面的组件的下次的启动时间。为了平衡进程缓存和底层内核缓存之间的整个系统资源系统会经常杀死这些进程。</p>

<p>Android 基于进程中当前活动的组件的重要性把一个进程排在它能排到的最高层级上。例如，如果一个进程持有一个服务和可见的活动，这个进程会被排为可见进程而不是服务进程。</p>

<p>另外，一个进程的排名可能会上升因为其它进程都依赖于它——一个正在服务其它进程的进程永远不可能比它正在服务的进程的排名低。例如，如果进程A中一个的content provider正在服务进程B的一个客户，或者如果进程A中的一个服务绑定到了进程B中的一个组件中，进程A总是被认为至少跟进程B一样重要。</p>

<p>因为运行一个服务的进程比运行后台活动的进程的排名高，所以一个初始化了长期操作的活动为那个操作启动一个服务可能会做得很好，而不是简单地创建一个工作线程——特别是如果那个操作很可能拖垮这个活动。例如，一个向网站正在上传图片的活动应该启动一个服务去执行上传以便上传可以在后台继续即使用户离开了这个活动。使用服务保证了操作至少具有“服务进程”的优先级，不管活动发生了什么。广播接收器应该采用服务而不是简单地把耗时的操作放在一个线程里是同样的道理。</p>

<h2>线程</h2>

<p>当应用程序启动时，系统会创建一个执行应用程序的线程，称为“主线程”。这个线程是非常重要的因为它负责给合适的用户界面部件调度事件，包括绘画事件。它也是应用程序和Android UI工具包里的组件(<a href="http://developer.android.com/reference/android/widget/package-summary.html">android.widget</a>和<a href="http://developer.android.com/reference/android/view/package-summary.html">android.view</a>包里的组件)交互的线程。这样，主线程有时也被称为UI线程。</p>

<p>系统不会为一个组件的每个实例创建一个单独的线程。所有运行在同一个进程中的组件都在UI线程里初始化，并且系统调用每个从那个线程分发的组件。因此，响应系统的回调方法（例如用<a href="http://developer.android.com/reference/android/view/View.html#onKeyDown(int,%20android.view.KeyEvent)">onKeyDown()</a> 来报告用户活动或是一个生命周期回调方法总是在进程中的UI线程里运行。</p>

<p>例如，当用户触摸屏幕上一个按钮时，应用程序的UI线程给这个部件调度触摸事件，从而设置其按下状态和将一个无效请求发送到事件队列中。UI 线程出队队列中的请求并通知这个部件它应该重绘自己。</p>

<p>当应用程序响应用户交互进行深入细致的工作时，这种单一的线程模型可以产生性能差除非正确地实现应用程序。特别是，如果一切都发生在UI线程，执行长时间的操作如网络访问和数据库查询将会阻塞整个UI。当这个线程被阻塞时，没有事件可以被分发出来，包括绘制事件。从用户的角度来看，应用程序似乎挂起。更糟的是，如果UI线程被阻塞超过几秒钟（目前大约是5秒）会给用户呈现臭名昭著的&#8221;<a href="http://developer.android.com/guide/practices/responsiveness.html">application not responding</a>&ldquo; (ANR) 对话框。用户也许会决定退出程序并且如果他们不开心的话会卸载程序。</p>

<p>此外，Android UI工具包不是线程安全的。所以，不能在一个工作线程里操作UI——对用户界面的所有操作必须都在UI线程里执行。因此，Android的单线程模型有简单的两条规则：</p>

<ol>
<li><p>不要阻塞UI线程。</p></li>
<li><p>不要从UI线程以外的线程里访问Android UI工具包。</p></li>
</ol>


<h3>工作线程</h3>

<p>因为上述的单线程模型，对不阻塞UI线程的应用程序UI的响应是至关重要的。如果你有不是瞬时的操作，你应该确保在单独的线程（“后台”或“工作”线程）里执行它们。</p>

<p>例如，下面是在一个单独的线程里下载一张图片并显示在<a href="http://developer.android.com/reference/android/widget/ImageView.html">ImageView</a>里的点击监听器的一段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">b</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>起初，这似乎工作得很好，因为它会创建一个新的线程去处理网络操作。然而，它违反了单线程模型的第二条规则：不要在UI线程以外的线程里访问Android UI工具包——这个样例在工作线程里而不是UI线程里修改<a href="http://developer.android.com/reference/android/widget/ImageView.html">ImageView</a>。这可能导致不确定的和意外的行为，这追查起来可能是困难且耗时的。</p>

<p>要解决这个问题，Android提供了几种方法从其它线程里来访问UI线程。以下是一个可以帮助的方法的列表：</p>

<ul>
<li><p><a href="http://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)">Activity.runOnUiThread(Runnable)</a></p></li>
<li><p><a href="http://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)">View.post(Runnable)</a></p></li>
<li><p><a href="http://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable,%20long)">View.postDelayed(Runnable, long)</a></p></li>
</ul>


<p>例如，你可以使用<a href="http://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)">View.post(Runnable)</a>方法修复上面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在这个实现是线程安全的：网络操作在一个单独的线程里完成而<a href="http://developer.android.com/reference/android/widget/ImageView.html">ImageView</a>在UI线程里操作。</p>

<p>然而，随着操作的复杂性的增加，这种代码可以变得复杂且难以维护。为了处理和一个工作线程更复杂的操作，你可以考虑在工作线程里用<a href="http://developer.android.com/reference/android/os/Handler.html">Handler</a>来处理从UI线程里传递的消息。但是，最好的解决方法是用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">Asynctask</a>的扩展类，它简化了需要与UI交互的工作线程任务的执行。</p>

<h3>使用 AsyncTask</h3>

<p><a href="http://developer.android.com/reference/android/os/AsyncTask.html">Asynctask</a>允许在用户界面上异步工作。它在一个工作线程里执行阻塞操作然后将结果发布到UI线程上来，而不需要自己来处理线程和/或 handlers。</p>

<p>要使用它，你必须继承<a href="http://developer.android.com/reference/android/os/AsyncTask.html">Asynctask</a>并实现<a href="http://developer.android.com/reference/android/os/AsyncTask.html#doInBackground(Params...)">doInBackground()</a>回调方法，它在一个后台线程池里运行。要更新UI，你应该实现<a href="http://developer.android.com/reference/android/os/AsyncTask.html#onPostExecute(Result)">onPostExecute()</a>方法，它传递<a href="http://developer.android.com/reference/android/os/AsyncTask.html#doInBackground(Params...)">doInBackground()</a>方法里的结果且运行在UI 线程里，所以你可以安全地更新你的UI。然后你可以通过在UI线程里调用<a href="http://developer.android.com/reference/android/os/AsyncTask.html#execute(Params...)">execute()</a>方法运行这个任务。</p>

<p>例如，你可以这么用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">Asynctask</a>实现上一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">DownloadImageTask</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">DownloadImageTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in a worker thread and</span>
</span><span class='line'><span class="cm">      * delivers it the parameters given to AsyncTask.execute() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">loadImageFromNetwork</span><span class="o">(</span><span class="n">urls</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in the UI thread and delivers</span>
</span><span class='line'><span class="cm">      * the result from doInBackground() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在UI是安全的且代码是简单的，因为它将这项工作分离成了应该在工作线程里完成的部分和应该在UI线程里完成的部分。</p>

<p>要充分了解如何使用这个类你应该阅读<a href="http://developer.android.com/reference/android/os/AsyncTask.html">Asynctask</a>参考，但下面是它是如何工作的简要概述：</p>

<ul>
<li><p>你可以指定参数的类型，进展值和任务的最终值，泛型使用。</p></li>
<li><p><a href="http://developer.android.com/reference/android/os/AsyncTask.html#doInBackground(Params...)">doInBackground()</a>方法在工作线程里会自动执行。</p></li>
<li><p><a href="http://developer.android.com/reference/android/os/AsyncTask.html#onPreExecute()">onPreExecute()</a>,<a href="http://developer.android.com/reference/android/os/AsyncTask.html#onPostExecute(Result)">onPostExecute()</a>和<a href="http://developer.android.com/reference/android/os/AsyncTask.html#onProgressUpdate(Progress...)">onProgressUpdate()</a>方法都在UI线程里调用。</p></li>
<li><p><a href="http://developer.android.com/reference/android/os/AsyncTask.html#doInBackground(Params...)">doInBackground()</a>方法返回的值被发送到<a href="http://developer.android.com/reference/android/os/AsyncTask.html#onPostExecute(Result)">onPostExecute()</a>方法里。</p></li>
<li><p>你可以在<a href="http://developer.android.com/reference/android/os/AsyncTask.html#doInBackground(Params...)">doInBackground()</a>方法里在任何时间调用<a href="http://developer.android.com/reference/android/os/AsyncTask.html#publishProgress(Progress...)">publishProgress()</a>来在UI线程里执行<a href="http://developer.android.com/reference/android/os/AsyncTask.html#onProgressUpdate(Progress...)">onProgressUpdate()</a>方法。</p></li>
<li><p>你可以在任何时间，从任何线程里取消任务。</p></li>
</ul>


<blockquote><p>注意：当你使用一个在活动里由于<a href="http://developer.android.com/guide/topics/resources/runtime-changes.html">runtime configuration change</a>（例如当用户改变了屏幕方向）而意外重新启动的工作线程时，你可能遇到的另一个问题，它也许会销毁你的工作线程。要看如何在这些重启动的活动之一期间保持你的任务和当活动被销毁时如何正确地取消任务，请参阅<a href="http://code.google.com/p/shelves/">Shelves</a>样例中的源代码。</p></blockquote>

<h3>线程安全的方法</h3>

<p>在某些情况下，你实现的方法可能会从多个线程里调用，因此写入必须是线程安全的。</p>

<p>这主要适用于可以被称为远程的方法——例如<a href="http://developer.android.com/guide/components/bound-services.html">bound service</a>里的方法。当一个实现了<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>方法的调用源自于这个<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>运行的同样的进程中时，这个方法就在调用者的线程里执行。然而，当这个调用源自于另一个进程时，这个方法就在系统维护的和运行<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>同一个进程里的线程池里选择一个线程运行（它不会在进程的 UI 线程里执行）。 例如，尽管一个服务的<a href="http://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)">onBind()</a>方法会从这个服务的进程的UI线程调用，但是在<a href="http://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)">onBind()</a>返回（例如，一个实现了RPC方法的子类）的这个对象里实现的方法会再线程池里调用。因为一个服务可以有多个客户，池中的多个线程可以同时占用同一个<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>。因此，<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>方法必须被实现为线程安全的。</p>

<p>类似的，一个content provider可以接收其它进程的数据请求。尽管<a href="http://developer.android.com/reference/android/content/ContentResolver.html">ContentResolver</a> 和<a href="http://developer.android.com/reference/android/content/ContentProvider.html">ContentProvider</a>类隐藏了进程间通信是如何管理的细节，响应这些请求的<a href="http://developer.android.com/reference/android/content/ContentProvider.html">ContentProvider</a>方法——<a href="http://developer.android.com/reference/android/content/ContentProvider.html#query(android.net.Uri,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String)">query()</a>, <a href="http://developer.android.com/reference/android/content/ContentProvider.html#insert(android.net.Uri,%20android.content.ContentValues)">insert()</a>, <a href="http://developer.android.com/reference/android/content/ContentProvider.html#delete(android.net.Uri,%20java.lang.String,%20java.lang.String[])">delete()</a>, <a href="http://developer.android.com/reference/android/content/ContentProvider.html#update(android.net.Uri,%20android.content.ContentValues,%20java.lang.String,%20java.lang.String[])">update()</a>，和<a href="http://developer.android.com/reference/android/content/ContentProvider.html#getType(android.net.Uri)">getType()</a>方法——在这个content provider的进程的一个线程池里调用，而不是这个进程的UI线程里调用。因为这些方法可以同时被任意数量的线程调用，所以它们也必须被实现为线程安全的。</p>

<h3>进程间通信</h3>

<p>Android提供了一种机制，使用远程过程调用（RPC）来进程间通信（IPC），其中一个方法被一个activity或其它应用程序组件调用，但是远端执行（另一个进程中），并返回任何结果给调用者。这需要分解一个方法的调用和它的数据到一个操作系统能理解的层级，从本地进程和地址空间传送到元曾进程和空间地址，然后重新组装和在那里重新再次调用。然后返回值在相反的方向上传输。Android提供了所有执行这些IPC交易的代码，所以你可以专注于定义和实现RPC编程接口。</p>

<p>要执行IPC，你的应用程序必须使用<a href="http://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,%20android.content.ServiceConnection,%20int)">bindService()</a>绑定到一个服务。欲了解更多信息，请参阅<a href="http://developer.android.com/guide/components/services.html">Services</a>开发指南。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tasks and Back Stack]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/05/19/tasks-and-back-stack/"/>
    <updated>2014-05-19T12:27:49+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/05/19/tasks-and-back-stack</id>
    <content type="html"><![CDATA[<blockquote><p>注：此为毕业设计中学院要求的翻译与自己所做毕设相关且不少于2万字符英文原始资料的任务，由于自己毕设做的是Android方面的开发，所以决定翻译一下Android官方文档中Training和API Guides中的部分内容。由于水平有限，如有错误，望理解。</p></blockquote>

<h2><a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">原文链接</a></h2>

<br/>


<p>一个应用程序通常包含多个<a href="http://developer.android.com/guide/components/activities.html">活动</a>。每个活动应该围绕一个用户可以执行和开始其它的活动特定的动作来设计。例如，电子邮件应用程序可能有一个展示新邮件的列表的活动。当用户选择一封邮件时，一个新的活动被打开来查看这封邮件。</p>

<!--more-->


<p>一个活动甚至能启动设备上其它应用程序中存在的活动。例如，如果你的应用程序想要发送一封邮件，你可以定义一个意图来执行“发送”任务并包含一些数据，例如邮件地址和消息。另一个应用程序的活动声明自己处理这种意图然后打开邮件。在这种情况下，意图是发送一封邮件，所以邮件应用程序的 &ldquo;compose&rdquo; 活动启动(如果有多个活动支持相同的意图)然后系统让用户选择使用哪一个。当邮件被发送出后，你的活动恢复并且似乎邮件的活动看起来是你的应用程序的一部分。尽管这些活动可能来自不同的应用程序，Android 通过保持两个活动在同一任务中维护了这种无缝的用户体验。</p>

<p>任务是当用户执行某项作业时和用户交互的活动的集合。这些活动以被打开的顺序安排在一个栈(“回退栈”)中。</p>

<p>设备的主屏幕是大多数任务的起点。当用户按下应用启动器中的图标(或主屏幕上的快捷方式)时，该应用程序的任务来到前台。如果应用程序不存在任务，然后一个新的任务会被创建并且那个应用程序的&#8221;主&#8221;活动打开并作为栈中的根活动。</p>

<p>当当前的活动启动另一个活动时，新的活动被压入堆栈的顶部并获取焦点。前一个活动保持在栈中，但被停止了。当一个活动停止时，系统保留其用户接口的当前状态。当用户按下返回按钮时，当前的活动从栈顶弹出(这个活动就被销毁了)并且前一个活动恢复(其之前的UI状态恢复)。栈中的活动从来没有重新排列，仅仅是从栈中压栈和出栈——当被当前的活动启动时压入栈和当用户用后退按钮离开它时弹出栈。因此，回退栈是作为一个“后进先出”的对象结构操作着。图 1 用展示了活动和当前回退栈在每个时间点的过程的时间线可视化了这种行为。</p>

<p><img src="http://jeffreylyg.github.io/images/2014-5-19/1.png" title="图 1" ></p>

<p>图1：表示了任务中每一个新的活动是怎样在回退栈中增加了一个项目。当用户按下返回按钮时，当前的活动被销毁，前一个活动恢复。</p>

<p>如果用户继续按返回，然后再堆栈中的每个活动都弹出来显示前一个，直到用户返回到主屏幕(或者任何任务开始时正在运行的活动)。当所有的活动从堆栈中移除后，这个任务就不再存在。</p>

<p><img class="right" src="http://jeffreylyg.github.io/images/2014-5-19/2.png" title="图 2" >
任务是一个当用户开始新任务或通过 <em>Home</em> 按钮去到主屏幕时可以移动到后台的内聚单位。当在后台时，堆栈中所有的活动被停止，但是回退栈的任务保持不变——任务仅仅是失去了焦点当另一个任务替换了它时，如图 2 所示。再一个任务可以返回到“前台”使用户可以在它们停止的地方获得它们。假设，例如，当前的任务(A任务)在它的堆栈里有三个活动——两个在当前这个活动之下。用户按了主 按钮，然后从应用启动器里启动了一个新的任务。当主屏幕出现时，A 任务进入后台。当新的应用程序启动时，系统为那个应用程序启动了一个带有自己的活动堆栈的任务(B任务)。与应用程序交互后，用户再次返回主页并选择最初启动的 A 任务的应用程序。现在 A 任务来到了前台——栈中所有的三个活动完好并且栈顶的活动恢复。此时，用户还可以通过返回主页选择启动了那个任务的应用程序图标(或通过从最近使用程序屏幕选择那个应用程序的任务)切回到 B 任务。这是一个 Android 上多任务的例子。</p>

<blockquote><p>注：多个任务在后台只能保留一次。然而，如果用户同一时间运行多个后台任务，系统可能会为了恢复内存开始销毁后台活动，导致活动状态丢失。详情请参见 <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#ActivityState">Activity state</a> 部分。</p></blockquote>

<p><img class="right" src="http://jeffreylyg.github.io/images/2014-5-19/3.png" title="图 3" >
因为在回退栈中的活动永远不会重新排列，如果你的应用程序允许用户从多个活动启动特定的活动，那么一个新的活动实例会被创建并且压入栈中(而不是把这个活动之前的任何实例拿到栈顶来)。因此，在你的应用程序中一个活动可能会被多次实例化(即使来自不同的任务)，如图 3 所示。因此，如果用户使用后退按钮向后导航，活动的每个实例(和每个的UI状态)会按它们被打开的顺序显示。然而，如果你不想一个活动被实例化多次你可以改变这种行为。怎么做在接下来关于 <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#ManagingTasks">Managing Tasks</a> 的章节中会讨论。</p>

<p>活动和任务的默认行为的总结：</p>

<ul>
<li><p>当活动 A 启动活动 B 时，活动 A 被停止，但系统会保留它的状态(例如滚动条的位置和输入到表单中的文字)。如果用户在活动 B 中按了后退按钮，活动 A 和它被保留的状态一起恢复。</p></li>
<li><p>当用户按下主按钮离开任务时，当前的活动被停止并且它的任务进入后台。系统保留任务中每个活动的状态。如果用户之后通过选择启动图标开始那个任务恢复任务，这个任务会进入前台并且恢复在栈顶的那个活动。</p></li>
<li><p>如果用户按了返回按钮，当前的活动从栈顶弹出并且销毁。栈里前一个活动被恢复。当一个活动被销毁时，系统不会保留活动的状态。</p></li>
<li><p>活动可以被实例化多次，甚至从其它任务上。</p></li>
</ul>


<blockquote><p>设计导航</p>

<p>欲了解更多有关应用程序导航在 Android 上是如何工作的，请阅读 Android 设计<a href="http://developer.android.com/design/patterns/navigation.html">导航</a>指导。</p></blockquote>

<h2>保存活动状态</h2>

<p>正如上面讨论的，系统的默认行为会保存一个活动的状态当它停止时。这样，当用户导航返回到前一个活动时，它的用户界面展示的是它消失时的样子。然而，你能——并且也应该——使用回调方法主动保留活动的状态，以防活动被销毁后必须重新创建。</p>

<p>当系统停止你的其中一个活动时(例如当一个新的活动启动或任务进入了后台)，系统如果为了恢复系统内存也许会完全地销毁那个活动。当这种情况发生时，活动的状态信息也就丢失了。如果发生了这种情况，系统仍然知道这个活动在回退栈中有一个位置，但是当这个活动被拿到栈顶时系统必须重新创建它(而不是恢复它)。为了避免丢失用户的工作，你应该在活动里通过实现 <a href="http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle">onSaveInstanceState()</a>) 回调方法主动保留用户的工作。</p>

<p>有关更多如何保存活动状态的信息，请参见 <a href="http://developer.android.com/guide/components/activities.html#SavingActivityState">Activities</a> 文档。</p>

<h2>任务管理</h2>

<p>如上所述，Android 通过将所有的活动逐次地放进同样的任务中和一个“先进先出”的堆栈中的方式来管理任务和回退栈——这对大多数应用程序有效并且你不必担心你的活动和任务是怎么关联的以及它们在回退栈中是怎么存在的。然而，你也许会决定要中断正常的行为。也许你想要应用程序的活动当它启动的时候是开始一个新的任务(而不是被放置在当前的任务内)。或者，当你开始一个新的活动，你想要将已经存在的实例拿到前面来(而不是在回退栈的顶部创建一个新的实例)。或者，你想要你的回退栈当用户离开任务时除了根活动外清除所有的活动。</p>

<p>你可以通过 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> manifest 元素的属性和传递给 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a> 的意图的标志做这些事情和更多这样的事情。</p>

<p>在这方面，你可以使用的主要的 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 属性如下：</p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#aff">taskAffinity</a></p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#lmode">launchMode</a></p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#reparent">allowTaskReparenting</a></p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#clear">clearTaskOnLaunch</a></p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#always">alwaysRetainTaskState</a></p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#finish">finishOnTaskLaunch</a></p>

<p>和你可以使用的主要的意图标志如下：</p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK">FLAG_ACTIVITY_NEW_TASK</a></p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP">FLAG_ACTIVITY_CLEAR_TOP</a></p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_SINGLE_TOP">FLAG_ACTIVITY_SINGLE_TOP</a></p>

<p>在接下来的章节里，你将会看到如何使用这些清单属性和意图标志来定义活动和任务是如何相关的以及活动在回退栈中是如何表现的。</p>

<blockquote><p>注意：大多数应用程序不应该打断活动和任务的默认行为。如果你确定有必要修改活动的默认行为，在启动和用返回按钮从其它的活动和任务中导航返回时谨慎使用并且确保测试活动的可用性。确保测试导航行为可能与用户预期的行为发生生冲突的情况。</p></blockquote>

<h3>定义启动模式</h3>

<p>启动模式允许你定义一个活动的新实例如何与当前任务相关联。你可以通过两种方式定义不同的启动模式：</p>

<p><a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#ManifestForTasks">使用清单文件</a></p>

<p>当你在清单文件中声明一个活动时，你可以当活动启动的时候指定活动如何与任务相关联。</p>

<p><a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#IntentFlagsForTasks">使用意图标志</a></p>

<p>当你调用 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a> 时，你可以在<a href="http://developer.android.com/reference/android/content/Intent.html">意图</a>里包含一个声明了新的活动如何(或是否)与当前的任务相关联的标志。</p>

<p>因此，如果活动 A 启动活动 B， 活动 B 可以在其清单定义应该如何与当前任务相关联(如果有的话)和活动 A 还可以要求活动 B 应该如何与当前任务相关联。如果这两个活动都定义了活动 B 应该如何与任务相关联，那么活动 A 的请求(如在意图里定义的)高于活动 B 的请求(如在清单中定义的)。</p>

<blockquote><p>注：一些适用于清单文件的启动模式并不是适用于意图标志，同样，一些适用于意图标志的启动模式也不适用于清单文件。</p></blockquote>

<h4>使用清单文件</h4>

<p>当在清单文件声明活动时，你可以用 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 元素的<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#lmode">启动模式</a>属性指定活动应该如何与任务相关联。</p>

<p>该<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#lmode">启动模式</a>属性指定一个活动应该如何启动进任务中的指令。有四种不同的启动模式你可以给<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#lmode">启动模式</a>属性赋值：</p>

<p>&ldquo;standard&rdquo;(默认模式)</p>

<p>默认。从任务里启动活动和发送意图给活动系统会创建这个活动的一个新实例。活动会被多次实例化，每个实例可以属于不同的任务，并且一个任务可以有多个实例。</p>

<p>&ldquo;singleTop&rdquo;</p>

<p>如果活动的一个实例已经在当前任务的栈顶存在，系统会通过调用它的 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法给那个实例发送一个意图，而不是创建活动的一个新实例。该活动可以被实例化多次，每个实例可以属于不同的任务，一个任务可以有多个实例(但仅当回退栈顶部的活动不是一个该活动已存在的实例)。</p>

<p>例如，假设一个任务的回退栈由根活动 A 和活动 B，活动 C 和顶部的活动 D 组成（栈的顺序为 A-B-C-D; D在顶部）。一个意图过来请求 D 类型的活动。如果 D 有默认的 &ldquo;standard&rdquo; 启动模式，一个类的新实例会被启动并且栈变为 A-B-C-D-D。然而，D 的启动模式为 &ldquo;singleTop&#8221;，D 已存在的实例通过 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法接收到这个意图，因为它是在栈的顶部，栈仍然保持为 A-B-C-D。然后，如果一个意图过来请求B类型的活动，则 B 的新实例被添加进堆栈中，即使它的启动模式为 &#8220;singleTop&#8221;。</p>

<blockquote><p>注意：当活动的一个新实例被创建时，用户可以按返回按钮来返回到前一个活动。但是当一个活动已存在的实例处理一个新意图时，用户不可以按返回键来返回到新意图通过 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法到达之前时的状态。</p></blockquote>

<p>&ldquo;singleTask&rdquo;</p>

<p>系统会创建一个新任务并从新任务的根部实例化活动。然而，如果该活动的一个实例已经存在于一个单独的任务，系统会通过调用它的 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法发送意图给这个已存在的实例，而不是创建一个新的实例。一个活动在同一时间只能存在一个实例。</p>

<blockquote><p>注意：虽然活动在一个新的任务里启动，但是后退按钮仍然使用户返回到前一个活动。</p></blockquote>

<p>&ldquo;singleInstance&rdquo;</p>

<p>和 &ldquo;singleTask&rdquo; 一样，除了系统不会在任务里启动任何其它的活动来持有这个实例。该活动始终是任务里单一且唯一的成员；任何被这个活动启动的活动在一个单独的任务里打开。</p>

<p>再举一个例子，Android 浏览器程序声明网页浏览器的活动应该总是在它自己的任务里打开——通过在 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 元素里指定为 <strong>singleTask</strong> 启动模式。这意味着你的应用程序发出一个意图来打开 Android 浏览器时，它的活动不是放置在跟你的应用程序一样的任务里。相反，无论是启动浏览器的新的一个任务还是浏览器有一个运行在后台的任务，那个任务都会被拿到前台来处理这个新的意图。</p>

<p>不管活动是否启动一个新的任务还是启动了它的同一个任务，后退键总是把用户带到前一个活动。然而，如果你启动了一个为 <strong>singleTask</strong> 启动模式的活动，然后如果那个活动在一个后台任务里存在一个实例，那么那整个任务会被带到前台来。此时，回退栈包含所有被拿到前台的活动放在栈顶上。图 4 说明了这种类型的方案。</p>

<p><img src="http://jeffreylyg.github.io/images/2014-5-19/4.png" title="图 4" ></p>

<p>图4：&#8221;singleTask&#8221;启动模式的活动是如何被添加进回退栈的一个展示。如果活动已经是带有自己回退栈的后台任务的一部分，那么这整个回退栈也会被拿到前台来放在当前任务的顶部。</p>

<p>有关在清单文件中使用启动模式的更多信息，请参阅 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 元素的文档，其中有更多关于启动模式属性和可被接受的值的讨论。</p>

<blockquote><p>注：你为活动设置的启动模式属性的行为会被启动活动的带有标志的意图所覆盖，如在下一节讨论的。</p></blockquote>

<h4>使用意图标志</h4>

<p>当启动一个活动，你可以通过传递给 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a> 一个带有标志的意图来改变活动和它的任务默认的关联行为。你可以使用的改变默认行为的标志如下：</p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK">FLAG_ACTIVITY_NEW_TASK</a></p>

<p>启动一个新的任务。如果一个任务已经运行你正在启动的活动，那个任务会被带到前台来并带着上次的状态恢复并且这个活动在 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法里接收新的意图。</p>

<p>这将产生和 &ldquo;singleTask&rdquo; 启动模式值一样的行为，这在上一节已经讨论过了。</p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_SINGLE_TOP">FLAG_ACTIVITY_SINGLE_TOP</a></p>

<p>如果要启动的活动是当前活动(在回退栈的顶部)，那么现有的实例接收 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法的调用，而不是创建这个活动的一个新的实例。</p>

<p>这将产生和 &ldquo;singleTop&rdquo; 启动模式值一样的行为，这在上一节已经讨论过了。</p>

<p><a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP">FLAG_ACTIVITY_CLEAR_TOP</a></p>

<p>如果要启动的活动已经在当前任务中运行，然后所有它顶部的其它活动都被销毁并且这个意图被传送来通过 <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)">onNewIntent()</a> 方法来恢复这个活动的实例，而不是创建这个活动的一个新的实例。</p>

<p>在<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#lmode">启动模式</a>属性里没有一个值可以产生这样的的行为。</p>

<p><strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 是最经常与 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 一起使用的。当一起使用时，这些标志是定位另一个任务中存在的活动和把它放在它所能响应的Intent的某个位置的一种方式。</p>

<blockquote><p>注意：如果指定的活动启动模式为 &ldquo;standard&#8221;，它也能从堆栈中删除并且一个新的实例在它的地方启动来处理传人的意图。这是因为对于一个新的意图当启动模式为 &#8220;standard&rdquo; 时一个新的实例总是被创建。</p></blockquote>

<h3>处理亲和性</h3>

<p>亲和性指的是一个活动更倾向于属于哪个任务。默认情况下，同一应用程序的所有活动彼此具有亲和性。所以，默认的，同一应用程序的所有活动倾向于在同一个任务中。然而，你可以改变一个活动的默认亲和性。不同应用程序的活动可以共享一个亲和性，或者同一应用程序中的活动可以被赋值为不同任务的亲和性。</p>

<p>你可以用 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 元素的 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#aff">taskAffinity</a> 属性改变任何已给的活动的亲和性。</p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#aff">taskAffinity</a> 属性需要一个字符串值，它必须唯一的，来自 <manifest> 元素中声明的默认包名，因为系统使用那个名字来识别应用程序的默认任务亲和性。</p>

<p>亲和性在两种情况下发挥作用：</p>

<ul>
<li>当一个启动活动的意图包括 <a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK">FLAG_ACTIVITY_NEW_TASK</a> 标志时。</li>
</ul>


<p>一个新的活动，默认情况下，启动进入这个叫做 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a> 活动的任务。它被推送到和调用者一样的回退栈里。然而，如果传给 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a> 的意图包含 <a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK">FLAG_ACTIVITY_NEW_TASK</a> 标志的话，系统会寻找一个不同的任务来容纳这个新活动。通常情况下，它是一个新的任务，但并不是必须如此。如果有一个已经存在的任务和这个新活动是一样的亲和性，这个活动会启动进入那个任务。如果不一样的话，它开始一个新的任务。</p>

<p>如果这个标志导致一个活动开始一个新的任务并且用户按了 <em>Home</em> 按钮离开了它，那么必须有某种方式使用户导航返回到这个任务。一些实体(例如通知管理器)总是在一个外部的任务里启动活动，从来不是作为它们自己的一部分，所以它们总是把 FLAG_ACTIVITY_NEW_TASK 标志放进它们传给 <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)">startActivity()</a>的意图里。如果你有一个通过一个也许使用了这个标志的外部实体可以调用的活动，注意用户有一种独立的方式来返回那个启动的任务，例如用启动图标(任务的根活动有一个 <a href="http://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER">CATEGORY_LAUNCHER</a> 的意图过滤器；见下面的 <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#Starting">Starting a task</a> 章节)。</p>

<ul>
<li>当一个活动它的 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#reparent">allowTaskReparenting</a> 属性被设置为 &ldquo;true&#8221;时。</li>
</ul>


<p>这种情况下，当这个活动有一个亲和性的任务进入前台时，该活动可以从它启动的任务移动到这个任务。</p>

<p>例如，假设一个报告选定城市天气情况的活动被定义为一个旅游应用程序的一部分。它在同样的应用程序里和其它的活动有同样的亲和性(默认的应用亲和性)并且允许它用这个属性重新设置。当你其中的一个活动启动天气报告活动时，它最初和你的活动属于同样的任务。然而，当旅游应用程序的任务进入到前台时，天气报告的活动被重新分配到那个任务并在它里面展示。</p>

<blockquote><p>提示：如果一个apk文件从用户的角度包含不止一个“应用程序”，你可能想使用 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#aff">taskAffinity</a> 属性给和每个“应用程序”相关的活动赋予不同的亲和性。</p></blockquote>

<h3>清除回退栈</h3>

<p>如果用户离开一个任务很长一段时间后，系统将清除这个任务里的所有活动除了根活动。当用户再一次返回这个任务，仅仅只有根活动被恢复。系统这样的行为是因为在一段很长的时间后，用户很可能放弃了他们之前正在做的事情并且返回到这个任务开始一些事情。</p>

<p>有一些活动属性你可以使用来修改这种行为：</p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#always">alwaysRetainTaskState</a></p>

<p>如果这个属性在任务的根活动里设置为 &ldquo;true&#8221;，刚刚描述的默认行为就不会发生。任务会保留在它堆栈里的所有活动即使在一段很长的时间之后。</p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#clear">clearTaskOnLaunch</a></p>

<p>如果这个属性在任务的根活动里设置为 &ldquo;true&#8221;，堆栈会清除到只剩根活动无论何时用户离开任务和返回任务。换句话说，它正好与 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#always">alwaysRetainTaskState</a> 相反。用户总是返回到任务的初始状态，即使是离开任务一会儿。</p>

<p><a href="http://developer.android.com/guide/topics/manifest/activity-element.html#finish">finishOnTaskLaunch</a></p>

<p>这个属性有点像 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#clear">clearTaskOnLaunch</a>，但是它运行在一个单一的活动之上，而不是整个任务。它还可能导致任何活动离开，包括根活动。当它被设置为 &ldquo;true&#8221;时，这个活动只会保留当前会话的部分。如果这个用户离开了然后又回到任务，它不再存在。</p>

<h3>启动任务</h3>

<p>你可以设置一个活动作为一个任务的切入点通过给它一个用 &ldquo;android.intent.action.MAIN&rdquo; 作为指定动作和 &ldquo;android.intent.category.LAUNCHER&rdquo; 作为指定类别的意图过滤器。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的一个意图过滤器会导致活动的图标和标签在应用程序启动器上展示，给用户一种方式来启动活动和在任务任意时间创建启动之后返回任务。</p>

<p>第二个能力是很重要的：用户必须能够离开一个任务然后通过使用这个活动启动器回来。由于这个原因，这两个启动模式总是在启动任务时标记活动，&#8221;singleTask&#8221; 和 &ldquo;&#8221;singleInstance&rdquo; 应该仅当被用于具有 <a href="http://developer.android.com/reference/android/content/Intent.html#ACTION_MAIN">ACTION_MAIN</a> 和 <a href="http://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER">CATEGORY_LAUNCHER</a> 过滤器的活动。设想一下，例如，如果不要过滤器会发生什么：一个意图启动了一个 &ldquo;singleTask&rdquo; 的活动，初始化了一个新的任务，并且用户花了一些时间在该任务上工作。然后用户按了 <em>Home</em> 按钮。这个任务被传送到后台并且不可见。现在用户没有办法返回到这个任务了，因为它没有在应用启动器里展示。</p>

<p>对于这些你不想用户能够返回到一个活动的情况，将 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html">&lt;activity></a> 元素的 <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#finish">finishOnTaskLaunch</a> 设置为 &ldquo;true&rdquo;(参见 <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html#Clearing">Clearing the stack</a>)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Tips]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/05/16/performance-tips/"/>
    <updated>2014-05-16T11:28:00+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/05/16/performance-tips</id>
    <content type="html"><![CDATA[<blockquote><p>注：此为毕业设计中学院要求的翻译与自己所做毕设相关且不少于2万字符英文原始资料的任务，由于自己毕设做的是Android方面的开发，所以决定翻译一下Android官方文档中Training和API Guides中的部分内容。由于水平有限，如有错误，望理解。</p></blockquote>

<h2><a href="http://developer.android.com/training/articles/perf-tips.html">原文链接</a></h2>

<br/>


<p>这份文档主要涉及当结合使用一些微优化时可以提高应用程序的整体性能，但让这些优化给你的应用程序带来显著的性能影响是不可能的。选择正确的算法与数据结构应该总是你首先要考虑的，但这些内容在本份文档的范围之外。你可以用这份文档中所写的这些提示作为通用的编程技巧，而且为了通用的代码效率你也可以融入到你的编程习惯当中。</p>

<p>编写高效代码有两条基本规则：</p>

<ul>
<li><p>不要做你不需要做的工作。</p></li>
<li><p>如果能避免分配内存就不要分配内存。</p></li>
</ul>


<p>当微优化一个Android应用程序时面临最棘手的问题之一就是你的应用程序肯定要运行在多种类型的硬件上。不同版本的虚拟机运行在不同的处理器上的运行速度也是不同的。甚至不是一般的情况例如简单的说“X设备比Y设备快（慢）F倍”以及从一个设备上得到的结果扩展到其它设备上。特别是在模拟器上的测试几乎不会告诉你什么关于在任何设备上的性能。在带与不带JIT的设备之间也有巨大的差异：对带JIT设备来说是最好的代码但在不带JIT的设备上不总是最好的。</p>

<p>为确保你的应用在各种各样的设备上表现良好，请确保你的各级代码是高效的并致力优化应用的性能。</p>

<!--more-->


<h3>避免创建不必要的对象</h3>

<p>创建对象从来不是不需要代价的。即使带有线程临时对象分配池的分代垃圾回收器可以使分配时的代价低廉一点，但分配内存怎么都比不分配内存的代价昂贵。</p>

<p>如果你在你的应用里分配更多的对象，你就会强制定期的垃圾收集，创造一种“打嗝”的用户体验。在Android 2.3版本引入的并发垃圾收集器有所补救，但应始终避免不必要的工作。</p>

<p>因此，你应该避免创建你不需要的对象实例。一些可以起到帮助的东西的例子：</p>

<ul>
<li><p>如果你有一个方法返回一个字符串，你知道它的结果无论如何总是被追加在一个<a href="http://developer.android.com/reference/java/lang/StringBuffer.html"><code>StringBuffer</code></a>后面，改变你的签名和实现使该函数可以直接追加，而不是创建一个短期的临时对象。</p></li>
<li><p>当从一组输入数据提取字符串，尝试返回原始数据的一个子串而不是创建它的一个副本时，你会创建一个新的String对象，但它会和这个数据共享<code>char[]</code>。(做一个权衡就是如果你只使用原始输入的一小部分，在这种方式下你得在内存处处保留着这份原始数据。)</p></li>
</ul>


<p>一个有些更激进的想法是切片多维数组转换成并行的单个一维数组：</p>

<ul>
<li><p><code>int</code>数组比<code>Integer</code>对象的数组更好，但这也推广得到一个事实，即整数的两个平行阵列也比<code>(int, int)</code>的对象数组的效率高很多。这同样适用于基本类型的任意组合。</p></li>
<li><p>如果你需要实现一个存储着<code>(Foo, Bar)</code>元组对象的容器，要记住，两个平行的<code>Foo[]</code>和<code>Bar[]</code>数组通常要比自定义的<code>(Foo, Bar)</code>对象的单个数组更好。（当然，唯一的例外是当你设计一个让其它代码来访问的API时，在速度方面做一个小的妥协通常更好来达到良好的API设计的目的。）</p></li>
</ul>


<p>一般来说，尽可能地避免创建短期的临时对象。越少的对象创建意味着越少次数的垃圾收集，这对用户体验有直接的影响。</p>

<h3>多使用静态的方法和属性</h3>

<p>如果你不需要访问一个对象的字段，请确保你的方法是静态的。这样将会使调用大约有15%~20%的速度提升。这也是一个很好的习惯，因为你可以从方法签名告诉调用者调用该方法不能改变对象的状态。</p>

<h3>将常量声明为Static和Final类型</h3>

<p>思考下面的在类顶部的声明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当一个类第一次被使用时编译器生成一个叫做<code>&lt;clinit&gt;</code>的类初始化方法会被执行。该方法存储值42到变量<code>intVal</code>里，并为变量<code>strVal</code>从类文件字符串常量表里提取一个引用。当这些值被引用后，它们能用字段查找来访问。</p>

<blockquote><p>注： 此优化只适用于原始类型和<code>String</code>常量，不是任意的引用类型。不过，尽可能地声明常量为<code>static final</code>是很好的做法。</p></blockquote>

<h3>避免内部的<code>Getters/Setters</code></h3>

<p>在本地语言例如C++很常见使用getters(<code>i = getCount()</code>)而不是直接访问字段<code>(i = mCount)</code>。这在C++里是一个很好的习惯并且也经常在其它面向对象语言例如C#和Java中实践，因为编译器通常是内联访问，如果你需要限制或调试字段访问你可以在任何时候添加代码。</p>

<p>然而，这在Android上不是一个很好的办法。虚方法的调用通常是非常耗时的，远远超过了实例字段查找。遵循共同的面向对象的编程习惯并有getter和setter的公有接口是合理的，但在一个类中你应该直接访问字段。</p>

<p>如果没有JIT，直接字段访问大约是调用一个微不足道的getter的3倍快。有了JIT之后(直接字段访问像访问本地一样快捷)直接字段访问大约是调用一个微不足道的getter的7倍快。</p>

<blockquote><p>请注意，如果你使用了<strong>ProGuard</strong>，你可以两全其美因为<strong>ProGuard</strong>为你提供了内联访问。</p></blockquote>

<h3>使用增强的For循环语法</h3>

<p>增强的<code>for</code>循环(有时也被称为&#8221;for-each&#8221;循环)，可用于实现了<code>Iterable</code>接口的集合和数组。如果使用集合，一个迭代器会被分配出来让接口调用<code>hasNext()</code>和<code>next()</code>方法。如果使用<code>ArrayList</code>，一个手写的计数循环大约是它的3倍快(不管有没有使用JIT)，但是对其他集合来说，增强的for循环语法完全等同于明确的迭代器的用法。</p>

<p>遍历一个数组通常有以下几种选择：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mSplat</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Foo</span><span class="o">[]</span> <span class="n">mArray</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">zero</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">mArray</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">one</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Foo</span><span class="o">[]</span> <span class="n">localArray</span> <span class="o">=</span> <span class="n">mArray</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">localArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">localArray</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">two</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Foo</span> <span class="n">a</span> <span class="o">:</span> <span class="n">mArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="o">.</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>zero()</code>方法是最慢的。因为JIT还不能优化掉每一次迭代循环时得到数组长度的代价。</p>

<p><code>one()</code>方法是较快的。它把所有东西都放进了本地变量中从而避免了查找。仅仅数组长度提供了性能优势。</p>

<p><code>two()</code>方法在没有JIT的设备上是最快的，在拥有JIT的设备上和<code>one()</code>方法没什么区别。它采用了Java编程语言1.5版本中引入的增强的for循环语法。</p>

<p>因此，你应该采用增强的for循环作为默认用法，但对性能关键的<code>ArrayList</code>迭代来说考虑用手写的技术循环。</p>

<blockquote><p>提示：参见Josh Bloch&rsquo;s Effective Java中的第46条.</p></blockquote>

<h3>考虑用私有内部类包访问而不是私有访问</h3>

<p>思考下面的类定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Inner</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">stuff</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">doStuff</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">mValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mValue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Inner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mValue</span> <span class="o">=</span> <span class="mi">27</span><span class="o">;</span>
</span><span class='line'>        <span class="n">in</span><span class="o">.</span><span class="na">stuff</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Value is &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的关键是我们定义了一个私有内部类(<code>Foo$Inner</code>)直接访问外部类的私有方法和私有实例字段。这是合法的，并且如预期代码打印出了“Value is 27”。</p>

<p>问题是虚拟机认为从<code>Foo$Inner</code>访问Foo的私有成员是非法的因为<code>Foo</code>和<code>Foo$Inner</code>是不同的类，即使Java语言允许内部类访问外部类的私有成员。要弥补差距，编译器生成了一对合成方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*package*/</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">Foo</span><span class="o">.</span><span class="na">access</span><span class="n">$100</span><span class="o">(</span><span class="n">Foo</span> <span class="n">foo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">mValue</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/*package*/</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">Foo</span><span class="o">.</span><span class="na">access</span><span class="n">$200</span><span class="o">(</span><span class="n">Foo</span> <span class="n">foo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">.</span><span class="na">doStuff</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>内部类会调用这些静态方法在它任何需要访问外部类<code>mValue</code>字段或者调用外部类<code>doStuff()</code>方法的时候。这句话的意思是上面的代码真正归结到你通过访问方法访问成员字段的情况。前面我们谈到了访问器是如何比直接字段访问慢的，所以这是一个特定的语言习语造成的“隐形”性能损失的例子。</p>

<p>如果你在性能热点上使用这样的代码，你可以通过声明内部类访问的字段和方法为包访问而不是私有访问来避免开销。不幸的是这意味着字段可以直接被其它类在同一个包中被访问，所以你不应该在公共API中使用这种方式。</p>

<h3>避免使用浮点数</h3>

<p>作为一个经验法则，在Android设备上浮点数比整数慢2倍。</p>

<p>在速度方面，<code>float</code>和<code>double</code>在更现代的硬件上没有区别。空间方面，double是float的两倍大。在台式机上，假设空间不是问题，你应该更倾向于用<code>double</code>而不是<code>float</code>。</p>

<p>此外，即使是整数，一些处理器具有硬件乘法但缺少硬件除法。在这种情况下，如果你是正在设计哈希表或做大量数学运算的人整数除法和取模操作在软件中的运行是你应该考虑的东西。</p>

<h3>了解和使用库</h3>

<p>除了所有常用的更喜欢用库代码而不是你自己的代码的理由外，记住，系统是可以自由更换调用库函数与手写代码的汇编，这可能比JIT为相应的Java生成的最好的代码要更好。这里典型的例子是<code>String.indexOf()</code>和相关的API，Dalvik用内联征替换了。类似的， 在带有JIT的Nexus One上<code>System.arraycopy()</code>方法大约是手写代码的循环的9倍快。</p>

<blockquote><p>提示：参见Josh Bloch&rsquo;s Effective Java第47条。</p></blockquote>

<h3>谨慎使用本地方法</h3>

<p>使用Android NDK的本地方法开发你的应用时不一定比用Java语言更有效率。一方面，有与Java到本地的过渡相关的成本，以及JIT不能跨界优化。如果你正在分配本地资源(本地堆上的内存，文件描述符或其它任何东西)，很明显地它在安排及时收集这些资源上更困难。你还需要为每个架构编译运行之上的代码（而不是依赖于拥有JIT）。你甚至可能为了考虑相同的架构要编译多个版本：为G1的ARM处理器编译的本地代码在Nexus One上的ARM处理器上不能充分利用，为Nexus One的ARM处理器编译的代码不能在G1的ARM处理器上运行。</p>

<p>本地代码主要有用的方面是当你有一个想要移植到Android的存在的本地代码库，而不是为了加速你用Java语言写的Android应用的某些部分。</p>

<p>如果你确实需要使用本地代码，你应该阅读我们的<a href="http://developer.android.com/training/articles/perf-jni.html">JNI提示</a>。</p>

<blockquote><p>参加Josh Bloch&rsquo;s Effective Java第54条。</p></blockquote>

<h3>性能神话</h3>

<p>在没有JIT的设备上，通过一个确切类型的变量调用方法比接口调用方法更高效这是事实(因此，例如通过<code>HashMap map</code>比<code>Map map</code>调用方法更快捷，即使两种情况中的map类型都是<code>HashMap</code>)。但这种情况不是2倍慢的情况，真实的差别更像是6%。此外，JIT使这两种调用没有什么区别了。</p>

<p>在没有JIT的设备上，缓存字段访问比重复访问字段快20%。有了JIT，字段访问的成本约等于本地访问，所以这不是一个值得优化的地方除非你觉得它使你的代码更易于阅读。(final, static 和 static final字段也是如此。)</p>

<h3>保持测量</h3>

<p>在开始优化之前，确保你有需要解决的问题。确保你能精确地测量你现有的性能，否则你将无法衡量你所尝试的选择的收益。</p>

<p>本文档提出的每项主张都有一个基准支持。这些基准的资源都可以在<a href="code.google.com%20%22dalvik%22%20project">code.google.com &ldquo;dalvik&rdquo; project</a>中找到。</p>

<p>这些基准是用Caliper microbenchmarking Java框架建立的。得到正确的微基准是很难的，所以Caliper用自己的方式为你做这项很艰难的事情，甚至检测出一些你没有测量你认为你在测量的东西。(因为，比如说虚拟机已经成功地优化了所有的代码了。)我们强烈建议你用Caliper来运行你自己的微基准。</p>

<p>你可能发现<code>TraceView</code>对分析很有用，但要认识到它目前是禁用JIT的，可能导致由JIT优化代码来的时间被弄错这一点很重要。尤其重要的是在通过TraceView数据的建议作出改变之后要确保产生的代码在没有TraceView时运行确实运行的更快。</p>

<p>如需更多分析和调试应用程序的帮助，请参阅下列文档:</p>

<ul>
<li><a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Profiling with Traceview and dmtracedump</a></li>
<li><a href="http://developer.android.com/tools/debugging/systrace.html">Analysing Display and Performance with Systrace</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genymotion, the fastest Android emulator for app testing and presentation]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/04/22/genymotion/"/>
    <updated>2014-04-22T23:33:44+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/04/22/genymotion</id>
    <content type="html"><![CDATA[<p>各位做Android开发的Developers可能早已受够了Google自带的模拟器，它确实又慢又卡，所以大多数Developers都是用真机调试，然而真机自然也有它的不方便之处，那就是你需要一台测试真机，这个一般公司都能给你提供，最主要的是它还是比较慢，做过iOS的人都喜欢用模拟器比真机多一点，除非一些在模拟器上调试不了的功能，因为iOS的模拟器比真机还快，还不需要安装一系列必要的Profile，之前做iOS的时候无不感叹iOS模拟器的方便，想着Android什么时候也能有这样一款模拟器就好了。今天偶然发现了这款叫<a href="http://www.genymotion.com/"><strong>Genymotion</strong></a>的模拟器，支持跨平台，亲测后只能用一句话来形容：“它真的太棒了”！启动速度和运行速度和自带的完全不在一个数量级上，是自带的几十倍，堪比iOS模拟器。强烈推荐做Android开发的同学们以后都用这款模拟器。也许发现的有点晚，但总比一直没有发现好吧，简单Google了一下发现网上配置教程也比较多，其实也不需要什么教程，按照官网上的做就行了，还是比较容易上手的，下面简单的来说一下安装过程和安装好后遇到的一些问题吧。</p>

<!--more-->


<p><img src="http://jeffreylyg.github.io/images/2014-4-22/1.png"></p>

<h2>安装过程</h2>

<p>1.首先安装VirtualBox，所以它能在Windows，Mac和Linux上都可以运行，这也是它比本地模拟器更快的原因。</p>

<p>2.从官网下载后安装然后注册一个账号即可，点击运行如下图所示：</p>

<p><img src="http://jeffreylyg.github.io/images/2014-4-22/2.png"></p>

<p>怎么样，界面是不是很漂亮？</p>

<p>3.用之前注册好的账号登录后选择一款手机型号或者自定义也行，例如我选择了我最喜欢的Nexus 5，然后就从服务器上去下载相应的虚拟机了，如下图所示：</p>

<p><img src="http://jeffreylyg.github.io/images/2014-4-22/3.png"></p>

<p>IntelliJ、Android Studio和Eclipse（不过Eclipse应该大多数人都不用了吧，和IDEA系列比简直太弱了啊）都有相应的插件，在官网上都可以下到。IDEA系列安装插件如下图所示，在Setting的Plugins里点击Install  plugin from disk找到所在位置安装就行。</p>

<p><img src="http://jeffreylyg.github.io/images/2014-4-22/4.png"></p>

<h2>遇到的问题</h2>

<p>这是网上很多配置教程没有的，也是我自己亲自遇到的问题。编译项目后在<strong>Genymotion</strong>模拟器上运行时发现报<code>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</code>的错误，这是因为<strong>Genymotion</strong>只支持x86结构，不支持ARM，如果你的项目是必须运行在ARM上的话，那就必须安装<a href="http://s5.filetrip.net/dl.php?fn=L3AvMjgzMjIvMTk1MDQyLUdlbnltb3Rpb24tQVJNLVRyYW5zbGF0aW9uX3YxLjEuemlw&amp;dn=R2VueW1vdGlvbi1BUk0tVHJhbnNsYXRpb25fdjEuMS56aXA=&amp;fs=OTM5MDI1MA==">Genymotion-ARM-Translation_v1.1.zip</a>，点击链接下载后在<strong>Genymotion</strong>模拟器的HomeScreen上把这个zip包拖拽上去就安装好了。</p>

<p>怎么样，看完了整个过程是不是觉得很简单？那还等什么呢，赶紧安装吧，体验<strong>Genymotion</strong>带来的快速和便捷吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clang Error: -Wunused-command-line-argument-hard-error-in-future]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/03/24/clang-error-wunused-command-line-argument-hard-error-in-future/"/>
    <updated>2014-03-24T02:29:32+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/03/24/clang-error-wunused-command-line-argument-hard-error-in-future</id>
    <content type="html"><![CDATA[<p>在公司的电脑上用<strong>Octopress</strong>搭好个人Blog后进行了一些初步设置后因为工作太忙然后搁那儿就没动了，等周末时间空出来后准备用自己的Mac Air重新搭建和配置一下Octopress以便以后都用自己的电脑在闲暇的时间来写写博客。在搭建时执行 <code>bundle install</code> 命令时总是报如下的错误：</p>

<!--more-->


<pre><code>Gem::Installer::ExtensionBuildError: ERROR: Failed to   build gem native extension.

/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby extconf.rb --with-cflags=-w
checking for main() in -lc... yes
creating Makefile

make "DESTDIR="
compiling redcloth_attributes.c
compiling redcloth_inline.c
compiling redcloth_scan.c
linking shared-object redcloth_scan.bundle
clang: error: unknown argument: '-multiply_definedsuppress' [-Wunused-command-line-argument-hard-error-in-future]
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future
make: *** [redcloth_scan.bundle] Error 1


Gem files will remain installed in /Library/Ruby/Gems/2.0.0/gems/RedCloth-4.2.9 for inspection.
Results logged to /Library/Ruby/Gems/2.0.0/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out
An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.
</code></pre>

<p>在各种Google和StackOverflow后问题出在<code>clang: error: unknown argument: '-multiply_definedsuppress' [-Wunused-command-line-argument-hard-error-in-future]</code>这句上，原因是更新了最新的Xocde 5.1后的Apple LLVM compiler把所有无法识别的命令行选项当成了错误，下面是<a href="https://developer.apple.com/library/ios/releasenotes/DeveloperTools/RN-Xcode/Introduction/Introduction.html">Xcode 5.1 Release Notes</a>中的解释：</p>

<blockquote><p>The Apple LLVM compiler in Xcode 5.1 treats unrecognized command-line options as errors. This issue has been seen when building both Python native extensions and Ruby Gems, where some invalid compiler options are currently specified.</p></blockquote>

<p>很感谢StackOverflow里这篇文章的帮助<a href="http://stackoverflow.com/questions/22352838/ruby-gem-install-json-fails-on-mavericks-and-xcode-5-1-unknown-argument-mul">http://stackoverflow.com/questions/22352838/ruby-gem-install-json-fails-on-mavericks-and-xcode-5-1-unknown-argument-mul</a>.</p>

<p>这个问题有两种解决办法：</p>

<ul>
<li>在Terminal里执行如下命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future bundle install 
</span><span class='line'>sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future gem install Gemmodule </span></code></pre></td></tr></table></div></figure>


<p>然而这种方法是一种临时性的解决办法，想要永久性的解决这个问题就要用第二种方法。</p>

<ul>
<li>升级ruby的版本，升级到解决了这个问题的版本就行，貌似是2.0.0-p451，大于等于这个版本的都行，我下面的操作就是升级到了2.1.1版本。</li>
</ul>


<p>ruby的安装有两种方法，分别是<strong>rvm</strong>和<strong>rbenv</strong>，而在执行<code>rvm install ruby</code>命令时又出现了如下蛋疼的错误：</p>

<pre><code>Searching for binary rubies, this might take some time.
No binary rubies available for: osx/10.9/x86_64/ruby-2.1.1.
Continuing with compilation. Please read 'rvm help mount' to get more information on binary rubies.
Checking requirements for osx.
Installing macports...............................................
Error running 'requirements_osx_port_install_port',
showing last 15 lines of /Users/apple/.rvm/log/1395596183_ruby-2.1.1/port_install.log
checking for lockf... yes
checking for flock... yes
checking for setmode... yes
checking for strcasecmp... yes
checking for strncasecmp... yes
checking for strlcpy... yes
checking for copyfile... yes
checking for clearenv... no
checking for sysctlbyname... yes
checking if readlink conforms to POSIX 1003.1a... yes
checking CommonCrypto/CommonDigest.h usability... yes
checking CommonCrypto/CommonDigest.h presence... yes
checking for CommonCrypto/CommonDigest.h... yes
checking for Tcl configuration... configure: error: Can't find Tcl configuration definitions
++ return 1
Requirements installation failed with status: 1.
</code></pre>

<p>于是又用<strong>rbenv</strong>去升级<strong>ruby</strong>。</p>

<p>首先用如下命令安装<strong>Homebrew</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>然后安装<strong>rbenv</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew install rbenv
</span><span class='line'>brew install ruby-build</span></code></pre></td></tr></table></div></figure>


<p>最后安装<strong>ruby</strong>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 2.1.1
</span><span class='line'>rbenv local 2.1.1
</span><span class='line'>rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>按照第二种方法升级ruby后在Octopress目录下执行<code>bundle install</code>命令，问题解决，然后就可以用<strong>rake</strong>命令进行发布，预览等一系列操作了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Octopress Blog]]></title>
    <link href="http://jeffreylyg.github.io/blog/2014/03/12/my-first-octopress-blog/"/>
    <updated>2014-03-12T14:37:20+08:00</updated>
    <id>http://jeffreylyg.github.io/blog/2014/03/12/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<p>很久之前就想搭一个个人<strong>Blog</strong>了，但一直苦于找不到一个合适的<strong>Blog</strong>平台。之前搞ACM的时候在CSDN上写过一些题解，主要做模板和记录的作用，写过几篇后就不了了之了。然后体验过国外很火的轻博客<a href="https://www.tumblr.com/"><strong>Tumblr</strong></a>以及国内的<a href="http://www.diandian.com/"><strong>点点</strong></a>等，这些平台都不能完全的私人定制，感觉甚是不爽。说到这儿可能会有人问为什么不去用<a href="http://wordpress.com/"><strong>WordPress</strong></a>，其实之前是有试着用<a href="http://wordpress.com/"><strong>WordPress</strong></a>去搭的，但感觉很是麻烦，先不说部署时的学习曲线，还要自己去找服务器，国内的免费服务器支持的不是很好，<strong>新浪云</strong>有支持，但免费的还是不能完全的私人定制，花钱租服务器觉得不划算，觉得还没有到花钱的地步，不是自己舍不得这笔钱，主要是认为自己才刚开始，博客一时半会儿不会到拥有大量读者的地步而且主要是自娱自乐。还有一个原因当时真得没有时间去折腾这个。所以这件事也就搁置了好久，一直到现在。</p>

<!--more-->


<p>最近偶然在Google问题浏览他人Blog的时候发现了<a href="http://octopress.org/"><strong>Octopress</strong></a>的存在，于是马上去它的官网查了查，瞬间被它的一句话所吸引：</p>

<blockquote><p>A blogging framework for hackers.</p></blockquote>

<p>于是大概看了一下它是如何部署的，原来是用<code>ruby</code>脚本帮你封装了生成静态页面以及git的一系列操作，虽然从来没用过<code>ruby</code>，但对git还是蛮熟悉的，而且它可以部署在<a href="http://pages.github.com/"><strong>Github Page</strong></a>上，所以服务器这一项完全免费还支持custom domain，于是立马开始了对<code>Octopress</code>的部署（网上有大量的Octopress的部署教程，这里不赘述了，请大家自行Google）。博文支持当下很流行的<code>Markdown</code>语法，<code>Markdown</code>确实强大而且<code>Markdown</code>还是蛮容易上手的，这里推荐一个Mac OS上很不错的Markdown编辑器<a href="http://mouapp.com/"><strong>Mou</strong></a>:</p>

<p><img src="http://mouapp.com/images/Mou_Screenshot_1.png" alt="Mou preview" /></p>

<p>随后发现了一款Octopress上非常不错的主题，第一眼看到它就喜欢上它的高大上了，这款主题叫<a href="http://shashankmehta.in/archive/2012/greyshade.html"><strong>Greyshade</strong></a>, 也就是本人现在正在用的这款主题。引入这款主题的时候会出现一个问题，那就是如果你引入了第三方评论系统<a href="http://disqus.com/"><strong>Disqus</strong></a>，那么引入这款主题后<a href="http://disqus.com/"><strong>Disqus</strong></a>后就看不见了，在网上Google了好久终于在这篇文章<a href="http://bryanone.com/blog/2014/03/01/problem-with-greyshade/">http://bryanone.com/blog/2014/03/01/problem-with-greyshade/</a>里找到了原因并有解决方案，很感谢这位博主。</p>

<p>最后，还是好基友说的那句话，搭一个Blog平台容易，但坚持写Blog不是一件容易的事。所以，总之，加油吧，在这里记录点什么。</p>
]]></content>
  </entry>
  
</feed>
